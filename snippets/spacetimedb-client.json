{
  "SpacetimeDB Connection Setup": {
    "prefix": ["stdb-connection", "spacetime-connection"],
    "description": "Create a SpacetimeDB connection",
    "body": [
      "var connection = DbConnection.Builder()",
      "\t.WithUri(new Uri(\"${1:ws://localhost:3000}\"))",
      "\t.WithModuleName(\"${2:your_database_name}\")",
      "\t.OnConnect((conn, identity, token) =>",
      "\t{",
      "\t\tConsole.WriteLine($\"Connected with identity: {identity}\");",
      "\t\t$3",
      "\t})",
      "\t.OnConnectError((ctx, error) =>",
      "\t{",
      "\t\tConsole.WriteLine($\"Connection error: {error}\");",
      "\t})",
      "\t.OnDisconnect((ctx, error) =>",
      "\t{",
      "\t\tConsole.WriteLine($\"Disconnected: {error}\");",
      "\t})",
      "\t.Build();",
      "",
      "$0"
    ]
  },
  "SpacetimeDB Subscribe to All": {
    "prefix": ["stdb-subscribe-all"],
    "description": "Subscribe to all tables",
    "body": [
      "connection.SubscriptionBuilder()",
      "\t.OnApplied((ctx) =>",
      "\t{",
      "\t\tConsole.WriteLine(\"Subscription applied\");",
      "\t\t$1",
      "\t})",
      "\t.OnError((ctx, error) =>",
      "\t{",
      "\t\tConsole.WriteLine($\"Subscription error: {error}\");",
      "\t})",
      "\t.SubscribeToAllTables();",
      "",
      "$0"
    ]
  },
  "SpacetimeDB Subscribe Query": {
    "prefix": ["stdb-subscribe", "spacetime-subscribe"],
    "description": "Subscribe to specific SQL queries",
    "body": [
      "var subscription = connection.SubscriptionBuilder()",
      "\t.OnApplied((ctx) =>",
      "\t{",
      "\t\tConsole.WriteLine(\"Subscription applied\");",
      "\t\t$2",
      "\t})",
      "\t.OnError((ctx, error) =>",
      "\t{",
      "\t\tConsole.WriteLine($\"Subscription error: {error}\");",
      "\t})",
      "\t.Subscribe(new[] { \"${1:SELECT * FROM player}\" });",
      "",
      "$0"
    ]
  },
  "SpacetimeDB Table Row Callbacks": {
    "prefix": ["stdb-callbacks", "spacetime-callbacks"],
    "description": "Set up table row callbacks",
    "body": [
      "// Set up row callbacks for ${1:Player} table",
      "connection.Db.${1:Player}.OnInsert += (ctx, row) =>",
      "{",
      "\tConsole.WriteLine($\"Player inserted: {row.Name}\");",
      "\t$2",
      "};",
      "",
      "connection.Db.${1:Player}.OnUpdate += (ctx, row) =>",
      "{",
      "\tConsole.WriteLine($\"Player updated: {row.Name}\");",
      "\t$3",
      "};",
      "",
      "connection.Db.${1:Player}.OnDelete += (ctx, row) =>",
      "{",
      "\tConsole.WriteLine($\"Player deleted: {row.Name}\");",
      "\t$4",
      "};",
      "",
      "$0"
    ]
  },
  "SpacetimeDB Reducer Callback": {
    "prefix": ["stdb-reducer-callback"],
    "description": "Set up a reducer callback",
    "body": [
      "connection.Reducers.On${1:ReducerName} += (ctx) =>",
      "{",
      "\tif (ctx.Event.Status is Status.Committed)",
      "\t{",
      "\t\tConsole.WriteLine(\"${1:ReducerName} succeeded\");",
      "\t\t$2",
      "\t}",
      "\telse if (ctx.Event.Status is Status.Failed(var error))",
      "\t{",
      "\t\tConsole.WriteLine($\"${1:ReducerName} failed: {error}\");",
      "\t}",
      "};",
      "",
      "$0"
    ]
  },
  "SpacetimeDB Call Reducer": {
    "prefix": ["stdb-call-reducer"],
    "description": "Call a reducer function",
    "body": [
      "connection.Reducers.${1:ReducerName}(${2:parameters});$0"
    ]
  },
  "SpacetimeDB Find Row": {
    "prefix": ["stdb-client-find"],
    "description": "Find a row in the client cache by unique field",
    "body": [
      "var ${1:result} = connection.Db.${2:TableName}.${3:UniqueField}.Find(${4:key});",
      "if (${1:result} != null)",
      "{",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Filter Rows": {
    "prefix": ["stdb-client-filter"],
    "description": "Filter rows in the client cache by index",
    "body": [
      "var ${1:results} = connection.Db.${2:TableName}.${3:IndexName}.Filter(${4:value});",
      "foreach (var ${5:row} in ${1:results})",
      "{",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Iterate Table": {
    "prefix": ["stdb-client-iter"],
    "description": "Iterate over all rows in a table from client cache",
    "body": [
      "foreach (var ${1:row} in connection.Db.${2:TableName}.Iter())",
      "{",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Unity Update Loop": {
    "prefix": ["stdb-unity-update"],
    "description": "Unity Update method with SpacetimeDB frame tick",
    "body": [
      "void Update()",
      "{",
      "\t// Process SpacetimeDB messages",
      "\tconnection?.FrameTick();",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Unity MonoBehaviour": {
    "prefix": ["stdb-unity-mono"],
    "description": "Unity MonoBehaviour with SpacetimeDB integration",
    "body": [
      "using UnityEngine;",
      "using SpacetimeDB;",
      "",
      "public class ${1:GameManager} : MonoBehaviour",
      "{",
      "\tprivate DbConnection connection;",
      "\t",
      "\tvoid Start()",
      "\t{",
      "\t\t// Initialize SpacetimeDB connection",
      "\t\tconnection = DbConnection.Builder()",
      "\t\t\t.WithUri(new Uri(\"${2:ws://localhost:3000}\"))",
      "\t\t\t.WithModuleName(\"${3:your_database_name}\")",
      "\t\t\t.OnConnect((conn, identity, token) =>",
      "\t\t\t{",
      "\t\t\t\tDebug.Log($\"Connected with identity: {identity}\");",
      "\t\t\t\t$4",
      "\t\t\t})",
      "\t\t\t.OnConnectError((ctx, error) =>",
      "\t\t\t{",
      "\t\t\t\tDebug.LogError($\"Connection error: {error}\");",
      "\t\t\t})",
      "\t\t\t.Build();",
      "\t\t",
      "\t\t// Subscribe to all tables",
      "\t\tconnection.SubscriptionBuilder()",
      "\t\t\t.OnApplied((ctx) => Debug.Log(\"Subscription applied\"))",
      "\t\t\t.SubscribeToAllTables();",
      "\t}",
      "\t",
      "\tvoid Update()",
      "\t{",
      "\t\t// Process SpacetimeDB messages",
      "\t\tconnection?.FrameTick();",
      "\t}",
      "\t",
      "\tvoid OnDestroy()",
      "\t{",
      "\t\t// Clean up connection",
      "\t\tconnection?.Disconnect();",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Game Client Template": {
    "prefix": ["stdb-game-client"],
    "description": "Complete game client template",
    "body": [
      "using System;",
      "using SpacetimeDB;",
      "",
      "public class ${1:GameClient}",
      "{",
      "\tprivate DbConnection connection;",
      "\tprivate bool isConnected = false;",
      "\t",
      "\tpublic void Connect(string uri, string databaseName)",
      "\t{",
      "\t\tconnection = DbConnection.Builder()",
      "\t\t\t.WithUri(new Uri(uri))",
      "\t\t\t.WithModuleName(databaseName)",
      "\t\t\t.OnConnect((conn, identity, token) =>",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine($\"Connected with identity: {identity}\");",
      "\t\t\t\tisConnected = true;",
      "\t\t\t\tOnConnected();",
      "\t\t\t})",
      "\t\t\t.OnConnectError((ctx, error) =>",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine($\"Connection error: {error}\");",
      "\t\t\t\tisConnected = false;",
      "\t\t\t})",
      "\t\t\t.OnDisconnect((ctx, error) =>",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine($\"Disconnected: {error}\");",
      "\t\t\t\tisConnected = false;",
      "\t\t\t})",
      "\t\t\t.Build();",
      "\t}",
      "\t",
      "\tprivate void OnConnected()",
      "\t{",
      "\t\t// Subscribe to all tables",
      "\t\tconnection.SubscriptionBuilder()",
      "\t\t\t.OnApplied((ctx) =>",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine(\"Subscription applied\");",
      "\t\t\t\tSetupCallbacks();",
      "\t\t\t})",
      "\t\t\t.SubscribeToAllTables();",
      "\t}",
      "\t",
      "\tprivate void SetupCallbacks()",
      "\t{",
      "\t\t// Example: Player table callbacks",
      "\t\tconnection.Db.Player.OnInsert += (ctx, player) =>",
      "\t\t{",
      "\t\t\tConsole.WriteLine($\"Player joined: {player.Name}\");",
      "\t\t};",
      "\t\t",
      "\t\tconnection.Db.Player.OnUpdate += (ctx, player) =>",
      "\t\t{",
      "\t\t\tConsole.WriteLine($\"Player updated: {player.Name}\");",
      "\t\t};",
      "\t\t",
      "\t\tconnection.Db.Player.OnDelete += (ctx, player) =>",
      "\t\t{",
      "\t\t\tConsole.WriteLine($\"Player left: {player.Name}\");",
      "\t\t};",
      "\t}",
      "\t",
      "\tpublic void Update()",
      "\t{",
      "\t\tif (isConnected)",
      "\t\t{",
      "\t\t\tconnection.FrameTick();",
      "\t\t}",
      "\t}",
      "\t",
      "\tpublic void Disconnect()",
      "\t{",
      "\t\tconnection?.Disconnect();",
      "\t\tisConnected = false;",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Connection with Token": {
    "prefix": ["stdb-connection-token"],
    "description": "Create connection with authentication token",
    "body": [
      "var connection = DbConnection.Builder()",
      "\t.WithUri(new Uri(\"${1:ws://localhost:3000}\"))",
      "\t.WithModuleName(\"${2:your_database_name}\")",
      "\t.WithToken(\"${3:your_auth_token}\")",
      "\t.OnConnect((conn, identity, token) =>",
      "\t{",
      "\t\t// Save token for future connections",
      "\t\tPlayerPrefs.SetString(\"SpacetimeToken\", token);",
      "\t\t$4",
      "\t})",
      "\t.Build();",
      "",
      "$0"
    ]
  },
  "SpacetimeDB Event Context Pattern": {
    "prefix": ["stdb-event-context"],
    "description": "Handle different event types in callbacks",
    "body": [
      "connection.Db.${1:TableName}.OnInsert += (ctx, row) =>",
      "{",
      "\tswitch (ctx.Event)",
      "\t{",
      "\t\tcase Event<Reducer>.Reducer(var reducerEvent):",
      "\t\t\tConsole.WriteLine($\"Row inserted by reducer: {reducerEvent.Reducer}\");",
      "\t\t\tbreak;",
      "\t\tcase Event<Reducer>.SubscribeApplied:",
      "\t\t\tConsole.WriteLine(\"Row inserted due to subscription\");",
      "\t\t\tbreak;",
      "\t\tcase Event<Reducer>.UnknownTransaction:",
      "\t\t\tConsole.WriteLine(\"Row inserted by unknown transaction\");",
      "\t\t\tbreak;",
      "\t}",
      "\t$0",
      "};"
    ]
  },
  "SpacetimeDB Unsubscribe": {
    "prefix": ["stdb-unsubscribe"],
    "description": "Unsubscribe from a subscription",
    "body": [
      "${1:subscription}.UnsubscribeThen((ctx) =>",
      "{",
      "\tConsole.WriteLine(\"Unsubscribed successfully\");",
      "\t$0",
      "});"
    ]
  },
  "SpacetimeDB Console Client": {
    "prefix": ["stdb-console-client"],
    "description": "Create a console application client",
    "body": [
      "using System;",
      "using System.Threading;",
      "using SpacetimeDB;",
      "",
      "class Program",
      "{",
      "\tstatic DbConnection connection;",
      "\tstatic bool running = true;",
      "\t",
      "\tstatic void Main(string[] args)",
      "\t{",
      "\t\tConsole.WriteLine(\"Starting SpacetimeDB client...\");",
      "\t\t",
      "\t\tconnection = DbConnection.Builder()",
      "\t\t\t.WithUri(new Uri(\"${1:ws://localhost:3000}\"))",
      "\t\t\t.WithModuleName(\"${2:your_database_name}\")",
      "\t\t\t.OnConnect((conn, identity, token) =>",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine($\"Connected! Identity: {identity}\");",
      "\t\t\t\tSetupSubscriptions();",
      "\t\t\t})",
      "\t\t\t.OnConnectError((ctx, error) =>",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine($\"Failed to connect: {error}\");",
      "\t\t\t\trunning = false;",
      "\t\t\t})",
      "\t\t\t.OnDisconnect((ctx, error) =>",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine($\"Disconnected: {error}\");",
      "\t\t\t\trunning = false;",
      "\t\t\t})",
      "\t\t\t.Build();",
      "\t\t",
      "\t\t// Main loop",
      "\t\twhile (running)",
      "\t\t{",
      "\t\t\tconnection.FrameTick();",
      "\t\t\tThread.Sleep(16); // ~60 FPS",
      "\t\t}",
      "\t\t",
      "\t\tconnection?.Disconnect();",
      "\t\tConsole.WriteLine(\"Client stopped.\");",
      "\t}",
      "\t",
      "\tstatic void SetupSubscriptions()",
      "\t{",
      "\t\tconnection.SubscriptionBuilder()",
      "\t\t\t.OnApplied((ctx) =>",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine(\"Subscriptions active\");",
      "\t\t\t\tSetupCallbacks();",
      "\t\t\t})",
      "\t\t\t.SubscribeToAllTables();",
      "\t}",
      "\t",
      "\tstatic void SetupCallbacks()",
      "\t{",
      "\t\t$0",
      "\t}",
      "}"
    ]
  },
  "SpacetimeDB Unity Player Controller": {
    "prefix": ["stdb-unity-player"],
    "description": "Unity player controller with SpacetimeDB movement sync",
    "body": [
      "using UnityEngine;",
      "using SpacetimeDB;",
      "",
      "public class ${1:PlayerController} : MonoBehaviour",
      "{",
      "\t[SerializeField] private float moveSpeed = 5f;",
      "\t[SerializeField] private string playerName = \"Player\";",
      "\t",
      "\tprivate DbConnection connection;",
      "\tprivate Identity? myIdentity;",
      "\tprivate bool isConnected = false;",
      "\t",
      "\tvoid Start()",
      "\t{",
      "\t\tConnectToGame();",
      "\t}",
      "\t",
      "\tvoid ConnectToGame()",
      "\t{",
      "\t\tconnection = DbConnection.Builder()",
      "\t\t\t.WithUri(new System.Uri(\"${2:ws://localhost:3000}\"))",
      "\t\t\t.WithModuleName(\"${3:your_game}\")",
      "\t\t\t.OnConnect((conn, identity, token) =>",
      "\t\t\t{",
      "\t\t\t\tmyIdentity = identity;",
      "\t\t\t\tisConnected = true;",
      "\t\t\t\tDebug.Log($\"Connected as {identity}\");",
      "\t\t\t\t",
      "\t\t\t\t// Join the game",
      "\t\t\t\tconn.Reducers.JoinGame(playerName);",
      "\t\t\t\t",
      "\t\t\t\t// Subscribe to updates",
      "\t\t\t\tconn.SubscriptionBuilder()",
      "\t\t\t\t\t.OnApplied(ctx => SetupPlayerCallbacks())",
      "\t\t\t\t\t.SubscribeToAllTables();",
      "\t\t\t})",
      "\t\t\t.Build();",
      "\t}",
      "\t",
      "\tvoid SetupPlayerCallbacks()",
      "\t{",
      "\t\tconnection.Db.Player.OnUpdate += (ctx, player) =>",
      "\t\t{",
      "\t\t\t// Update position if this is our player",
      "\t\t\tif (player.UserId == myIdentity)",
      "\t\t\t{",
      "\t\t\t\ttransform.position = new Vector3(player.X, transform.position.y, player.Z);",
      "\t\t\t}",
      "\t\t};",
      "\t}",
      "\t",
      "\tvoid Update()",
      "\t{",
      "\t\tconnection?.FrameTick();",
      "\t\t",
      "\t\tif (!isConnected) return;",
      "\t\t",
      "\t\t// Handle input",
      "\t\tfloat horizontal = Input.GetAxis(\"Horizontal\");",
      "\t\tfloat vertical = Input.GetAxis(\"Vertical\");",
      "\t\t",
      "\t\tif (Mathf.Abs(horizontal) > 0.1f || Mathf.Abs(vertical) > 0.1f)",
      "\t\t{",
      "\t\t\t// Calculate new position",
      "\t\t\tVector3 movement = new Vector3(horizontal, 0, vertical) * moveSpeed * Time.deltaTime;",
      "\t\t\tVector3 newPos = transform.position + movement;",
      "\t\t\t",
      "\t\t\t// Send movement to server",
      "\t\t\tconnection.Reducers.MovePlayer(newPos.x, newPos.z);",
      "\t\t}",
      "\t}",
      "\t",
      "\tvoid OnDestroy()",
      "\t{",
      "\t\tconnection?.Disconnect();",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Chat System": {
    "prefix": ["stdb-chat-client"],
    "description": "Chat system client implementation",
    "body": [
      "using System;",
      "using UnityEngine;",
      "using UnityEngine.UI;",
      "using SpacetimeDB;",
      "using System.Collections.Generic;",
      "",
      "public class ${1:ChatManager} : MonoBehaviour",
      "{",
      "\t[SerializeField] private InputField messageInput;",
      "\t[SerializeField] private Button sendButton;",
      "\t[SerializeField] private Text chatDisplay;",
      "\t[SerializeField] private ScrollRect scrollRect;",
      "\t",
      "\tprivate DbConnection connection;",
      "\tprivate List<string> chatHistory = new List<string>();",
      "\tprivate const int maxMessages = 100;",
      "\t",
      "\tvoid Start()",
      "\t{",
      "\t\tsendButton.onClick.AddListener(SendMessage);",
      "\t\tmessageInput.onEndEdit.AddListener(text => { if (Input.GetKeyDown(KeyCode.Return)) SendMessage(); });",
      "\t\t",
      "\t\t// Assume connection is already established",
      "\t\tconnection = FindObjectOfType<${2:GameManager}>().GetConnection();",
      "\t\tSetupChatCallbacks();",
      "\t}",
      "\t",
      "\tvoid SetupChatCallbacks()",
      "\t{",
      "\t\tconnection.Db.ChatMessage.OnInsert += (ctx, message) =>",
      "\t\t{",
      "\t\t\tstring formattedMessage = $\"[{message.Timestamp:HH:mm}] {message.PlayerName}: {message.Content}\";",
      "\t\t\tAddMessageToChat(formattedMessage);",
      "\t\t};",
      "\t}",
      "\t",
      "\tvoid SendMessage()",
      "\t{",
      "\t\tstring message = messageInput.text.Trim();",
      "\t\tif (string.IsNullOrEmpty(message)) return;",
      "\t\t",
      "\t\tconnection.Reducers.SendChatMessage(message);",
      "\t\tmessageInput.text = \"\";",
      "\t\tmessageInput.ActivateInputField();",
      "\t}",
      "\t",
      "\tvoid AddMessageToChat(string message)",
      "\t{",
      "\t\tchatHistory.Add(message);",
      "\t\t",
      "\t\t// Keep only recent messages",
      "\t\tif (chatHistory.Count > maxMessages)",
      "\t\t{",
      "\t\t\tchatHistory.RemoveAt(0);",
      "\t\t}",
      "\t\t",
      "\t\t// Update display",
      "\t\tchatDisplay.text = string.Join(\"\\n\", chatHistory);",
      "\t\t",
      "\t\t// Scroll to bottom",
      "\t\tCanvas.ForceUpdateCanvases();",
      "\t\tscrollRect.verticalNormalizedPosition = 0f;",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Reconnection Handler": {
    "prefix": ["stdb-reconnect"],
    "description": "Automatic reconnection handler",
    "body": [
      "using System;",
      "using System.Collections;",
      "using UnityEngine;",
      "using SpacetimeDB;",
      "",
      "public class ${1:ReconnectionManager} : MonoBehaviour",
      "{",
      "\t[SerializeField] private float reconnectDelay = 5f;",
      "\t[SerializeField] private int maxReconnectAttempts = 5;",
      "\t",
      "\tprivate string serverUri;",
      "\tprivate string databaseName;",
      "\tprivate string authToken;",
      "\tprivate int reconnectAttempts = 0;",
      "\tprivate bool isReconnecting = false;",
      "\t",
      "\tpublic event Action<DbConnection> OnReconnected;",
      "\tpublic DbConnection Connection { get; private set; }",
      "\t",
      "\tpublic void Initialize(string uri, string dbName, string token = null)",
      "\t{",
      "\t\tserverUri = uri;",
      "\t\tdatabaseName = dbName;",
      "\t\tauthToken = token;",
      "\t\tConnect();",
      "\t}",
      "\t",
      "\tvoid Connect()",
      "\t{",
      "\t\tvar builder = DbConnection.Builder()",
      "\t\t\t.WithUri(new Uri(serverUri))",
      "\t\t\t.WithModuleName(databaseName)",
      "\t\t\t.OnConnect((conn, identity, token) =>",
      "\t\t\t{",
      "\t\t\t\tDebug.Log($\"Connected! Identity: {identity}\");",
      "\t\t\t\treconnectAttempts = 0;",
      "\t\t\t\tisReconnecting = false;",
      "\t\t\t\t",
      "\t\t\t\t// Save token for future reconnections",
      "\t\t\t\tauthToken = token;",
      "\t\t\t\tPlayerPrefs.SetString(\"SpacetimeAuthToken\", token);",
      "\t\t\t\t",
      "\t\t\t\tOnReconnected?.Invoke(conn);",
      "\t\t\t})",
      "\t\t\t.OnConnectError((ctx, error) =>",
      "\t\t\t{",
      "\t\t\t\tDebug.LogError($\"Connection failed: {error}\");",
      "\t\t\t\tTryReconnect();",
      "\t\t\t})",
      "\t\t\t.OnDisconnect((ctx, error) =>",
      "\t\t\t{",
      "\t\t\t\tDebug.LogWarning($\"Disconnected: {error}\");",
      "\t\t\t\tTryReconnect();",
      "\t\t\t});",
      "\t\t",
      "\t\tif (!string.IsNullOrEmpty(authToken))",
      "\t\t{",
      "\t\t\tbuilder = builder.WithToken(authToken);",
      "\t\t}",
      "\t\t",
      "\t\tConnection = builder.Build();",
      "\t}",
      "\t",
      "\tvoid TryReconnect()",
      "\t{",
      "\t\tif (isReconnecting || reconnectAttempts >= maxReconnectAttempts)",
      "\t\t\treturn;",
      "\t\t",
      "\t\tisReconnecting = true;",
      "\t\treconnectAttempts++;",
      "\t\t",
      "\t\tDebug.Log($\"Attempting to reconnect... ({reconnectAttempts}/{maxReconnectAttempts})\");",
      "\t\tStartCoroutine(ReconnectAfterDelay());",
      "\t}",
      "\t",
      "\tIEnumerator ReconnectAfterDelay()",
      "\t{",
      "\t\tyield return new WaitForSeconds(reconnectDelay);",
      "\t\tConnect();",
      "\t}",
      "\t",
      "\tpublic void ForceReconnect()",
      "\t{",
      "\t\treconnectAttempts = 0;",
      "\t\tConnection?.Disconnect();",
      "\t\tTryReconnect();",
      "\t}",
      "\t",
      "\tvoid OnDestroy()",
      "\t{",
      "\t\tConnection?.Disconnect();",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Multiplayer Leaderboard": {
    "prefix": ["stdb-leaderboard"],
    "description": "Leaderboard UI with SpacetimeDB integration",
    "body": [
      "using System.Collections.Generic;",
      "using System.Linq;",
      "using UnityEngine;",
      "using UnityEngine.UI;",
      "using SpacetimeDB;",
      "",
      "public class ${1:LeaderboardUI} : MonoBehaviour",
      "{",
      "\t[SerializeField] private Transform leaderboardParent;",
      "\t[SerializeField] private GameObject leaderboardEntryPrefab;",
      "\t[SerializeField] private int maxEntries = 10;",
      "\t",
      "\tprivate DbConnection connection;",
      "\tprivate List<GameObject> leaderboardEntries = new List<GameObject>();",
      "\t",
      "\tvoid Start()",
      "\t{",
      "\t\t// Get connection from game manager",
      "\t\tconnection = FindObjectOfType<${2:GameManager}>().GetConnection();",
      "\t\tSetupLeaderboardCallbacks();",
      "\t}",
      "\t",
      "\tvoid SetupLeaderboardCallbacks()",
      "\t{",
      "\t\t// Listen for player score updates",
      "\t\tconnection.Db.Player.OnInsert += UpdateLeaderboard;",
      "\t\tconnection.Db.Player.OnUpdate += UpdateLeaderboard;",
      "\t\tconnection.Db.Player.OnDelete += UpdateLeaderboard;",
      "\t}",
      "\t",
      "\tvoid UpdateLeaderboard(EventContext ctx, Player player)",
      "\t{",
      "\t\t// Get all players sorted by score",
      "\t\tvar topPlayers = connection.Db.Player.Iter()",
      "\t\t\t.OrderByDescending(p => p.Score)",
      "\t\t\t.Take(maxEntries)",
      "\t\t\t.ToList();",
      "\t\t",
      "\t\t// Clear existing entries",
      "\t\tforeach (var entry in leaderboardEntries)",
      "\t\t{",
      "\t\t\tDestroy(entry);",
      "\t\t}",
      "\t\tleaderboardEntries.Clear();",
      "\t\t",
      "\t\t// Create new entries",
      "\t\tfor (int i = 0; i < topPlayers.Count; i++)",
      "\t\t{",
      "\t\t\tvar playerData = topPlayers[i];",
      "\t\t\tvar entryObj = Instantiate(leaderboardEntryPrefab, leaderboardParent);",
      "\t\t\t",
      "\t\t\t// Update entry display",
      "\t\t\tvar rankText = entryObj.transform.Find(\"Rank\").GetComponent<Text>();",
      "\t\t\tvar nameText = entryObj.transform.Find(\"Name\").GetComponent<Text>();",
      "\t\t\tvar scoreText = entryObj.transform.Find(\"Score\").GetComponent<Text>();",
      "\t\t\t",
      "\t\t\trankText.text = (i + 1).ToString();",
      "\t\t\tnameText.text = playerData.Name;",
      "\t\t\tscoreText.text = playerData.Score.ToString();",
      "\t\t\t",
      "\t\t\tleaderboardEntries.Add(entryObj);",
      "\t\t}",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Inventory System": {
    "prefix": ["stdb-inventory"],
    "description": "Inventory management with SpacetimeDB",
    "body": [
      "using System.Collections.Generic;",
      "using System.Linq;",
      "using UnityEngine;",
      "using SpacetimeDB;",
      "",
      "public class ${1:InventoryManager} : MonoBehaviour",
      "{",
      "\tprivate DbConnection connection;",
      "\tprivate Identity? myIdentity;",
      "\t",
      "\tpublic event System.Action<List<InventoryItem>> OnInventoryUpdated;",
      "\t",
      "\tvoid Start()",
      "\t{",
      "\t\tconnection = FindObjectOfType<${2:GameManager}>().GetConnection();",
      "\t\tmyIdentity = connection.Identity;",
      "\t\tSetupInventoryCallbacks();",
      "\t}",
      "\t",
      "\tvoid SetupInventoryCallbacks()",
      "\t{",
      "\t\tconnection.Db.InventoryItem.OnInsert += OnInventoryChanged;",
      "\t\tconnection.Db.InventoryItem.OnUpdate += OnInventoryChanged;",
      "\t\tconnection.Db.InventoryItem.OnDelete += OnInventoryChanged;",
      "\t}",
      "\t",
      "\tvoid OnInventoryChanged(EventContext ctx, InventoryItem item)",
      "\t{",
      "\t\tif (item.PlayerId == myIdentity)",
      "\t\t{",
      "\t\t\tUpdateInventoryDisplay();",
      "\t\t}",
      "\t}",
      "\t",
      "\tvoid UpdateInventoryDisplay()",
      "\t{",
      "\t\tvar myItems = connection.Db.InventoryItem.PlayerId.Filter(myIdentity.Value).ToList();",
      "\t\tOnInventoryUpdated?.Invoke(myItems);",
      "\t}",
      "\t",
      "\tpublic void UseItem(uint itemId)",
      "\t{",
      "\t\tconnection.Reducers.UseItem(itemId);",
      "\t}",
      "\t",
      "\tpublic void DropItem(uint itemId, int quantity = 1)",
      "\t{",
      "\t\tconnection.Reducers.DropItem(itemId, quantity);",
      "\t}",
      "\t",
      "\tpublic void TransferItem(uint itemId, Identity targetPlayer, int quantity = 1)",
      "\t{",
      "\t\tconnection.Reducers.TransferItem(itemId, targetPlayer, quantity);",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Real-time Notifications": {
    "prefix": ["stdb-notifications"],
    "description": "Real-time notification system",
    "body": [
      "using System.Collections;",
      "using System.Collections.Generic;",
      "using UnityEngine;",
      "using UnityEngine.UI;",
      "using SpacetimeDB;",
      "",
      "public class ${1:NotificationManager} : MonoBehaviour",
      "{",
      "\t[SerializeField] private GameObject notificationPrefab;",
      "\t[SerializeField] private Transform notificationParent;",
      "\t[SerializeField] private float notificationDuration = 3f;",
      "\t",
      "\tprivate DbConnection connection;",
      "\tprivate Queue<GameObject> activeNotifications = new Queue<GameObject>();",
      "\t",
      "\tvoid Start()",
      "\t{",
      "\t\tconnection = FindObjectOfType<${2:GameManager}>().GetConnection();",
      "\t\tSetupNotificationCallbacks();",
      "\t}",
      "\t",
      "\tvoid SetupNotificationCallbacks()",
      "\t{",
      "\t\t// Listen for notification events",
      "\t\tconnection.Db.Notification.OnInsert += (ctx, notification) =>",
      "\t\t{",
      "\t\t\tif (notification.TargetPlayer == connection.Identity)",
      "\t\t\t{",
      "\t\t\t\tShowNotification(notification.Message, notification.Type);",
      "\t\t\t}",
      "\t\t};",
      "\t\t",
      "\t\t// Achievement notifications",
      "\t\tconnection.Db.Achievement.OnInsert += (ctx, achievement) =>",
      "\t\t{",
      "\t\t\tif (achievement.PlayerId == connection.Identity)",
      "\t\t\t{",
      "\t\t\t\tShowNotification($\"Achievement Unlocked: {achievement.Name}!\", \"achievement\");",
      "\t\t\t}",
      "\t\t};",
      "\t}",
      "\t",
      "\tvoid ShowNotification(string message, string type = \"info\")",
      "\t{",
      "\t\tvar notificationObj = Instantiate(notificationPrefab, notificationParent);",
      "\t\t",
      "\t\t// Set notification content",
      "\t\tvar messageText = notificationObj.GetComponentInChildren<Text>();",
      "\t\tmessageText.text = message;",
      "\t\t",
      "\t\t// Style based on type",
      "\t\tvar background = notificationObj.GetComponent<Image>();",
      "\t\tswitch (type.ToLower())",
      "\t\t{",
      "\t\t\tcase \"error\":",
      "\t\t\t\tbackground.color = Color.red;",
      "\t\t\t\tbreak;",
      "\t\t\tcase \"success\":",
      "\t\t\t\tbackground.color = Color.green;",
      "\t\t\t\tbreak;",
      "\t\t\tcase \"achievement\":",
      "\t\t\t\tbackground.color = Color.yellow;",
      "\t\t\t\tbreak;",
      "\t\t\tdefault:",
      "\t\t\t\tbackground.color = Color.blue;",
      "\t\t\t\tbreak;",
      "\t\t}",
      "\t\t",
      "\t\tactiveNotifications.Enqueue(notificationObj);",
      "\t\tStartCoroutine(RemoveNotificationAfterDelay(notificationObj));",
      "\t}",
      "\t",
      "\tIEnumerator RemoveNotificationAfterDelay(GameObject notification)",
      "\t{",
      "\t\tyield return new WaitForSeconds(notificationDuration);",
      "\t\t",
      "\t\tif (activeNotifications.Count > 0 && activeNotifications.Peek() == notification)",
      "\t\t{",
      "\t\t\tactiveNotifications.Dequeue();",
      "\t\t}",
      "\t\t",
      "\t\tDestroy(notification);",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Team/Guild System": {
    "prefix": ["stdb-team-system"],
    "description": "Team/Guild management system",
    "body": [
      "using System.Collections.Generic;",
      "using System.Linq;",
      "using UnityEngine;",
      "using SpacetimeDB;",
      "",
      "public class ${1:TeamManager} : MonoBehaviour",
      "{",
      "\tprivate DbConnection connection;",
      "\tprivate Identity? myIdentity;",
      "\tprivate Team? currentTeam;",
      "\t",
      "\tpublic event System.Action<Team> OnTeamJoined;",
      "\tpublic event System.Action OnTeamLeft;",
      "\tpublic event System.Action<List<TeamMember>> OnTeamMembersUpdated;",
      "\t",
      "\tvoid Start()",
      "\t{",
      "\t\tconnection = FindObjectOfType<${2:GameManager}>().GetConnection();",
      "\t\tmyIdentity = connection.Identity;",
      "\t\tSetupTeamCallbacks();",
      "\t\tCheckCurrentTeam();",
      "\t}",
      "\t",
      "\tvoid SetupTeamCallbacks()",
      "\t{",
      "\t\t// Team updates",
      "\t\tconnection.Db.Team.OnInsert += OnTeamChanged;",
      "\t\tconnection.Db.Team.OnUpdate += OnTeamChanged;",
      "\t\tconnection.Db.Team.OnDelete += OnTeamChanged;",
      "\t\t",
      "\t\t// Team member updates",
      "\t\tconnection.Db.TeamMember.OnInsert += OnTeamMemberChanged;",
      "\t\tconnection.Db.TeamMember.OnUpdate += OnTeamMemberChanged;",
      "\t\tconnection.Db.TeamMember.OnDelete += OnTeamMemberChanged;",
      "\t}",
      "\t",
      "\tvoid CheckCurrentTeam()",
      "\t{",
      "\t\tvar myMember = connection.Db.TeamMember.PlayerId.Find(myIdentity.Value);",
      "\t\tif (myMember != null)",
      "\t\t{",
      "\t\t\tcurrentTeam = connection.Db.Team.Id.Find(myMember.Value.TeamId);",
      "\t\t\tif (currentTeam != null)",
      "\t\t\t{",
      "\t\t\t\tOnTeamJoined?.Invoke(currentTeam.Value);",
      "\t\t\t\tUpdateTeamMembers();",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "\t",
      "\tvoid OnTeamChanged(EventContext ctx, Team team)",
      "\t{",
      "\t\tif (currentTeam?.Id == team.Id)",
      "\t\t{",
      "\t\t\tcurrentTeam = team;",
      "\t\t\tOnTeamJoined?.Invoke(team);",
      "\t\t}",
      "\t}",
      "\t",
      "\tvoid OnTeamMemberChanged(EventContext ctx, TeamMember member)",
      "\t{",
      "\t\tif (member.PlayerId == myIdentity)",
      "\t\t{",
      "\t\t\t// Our team membership changed",
      "\t\t\tCheckCurrentTeam();",
      "\t\t}",
      "\t\telse if (currentTeam?.Id == member.TeamId)",
      "\t\t{",
      "\t\t\t// Someone in our team changed",
      "\t\t\tUpdateTeamMembers();",
      "\t\t}",
      "\t}",
      "\t",
      "\tvoid UpdateTeamMembers()",
      "\t{",
      "\t\tif (currentTeam == null) return;",
      "\t\t",
      "\t\tvar members = connection.Db.TeamMember.TeamId.Filter(currentTeam.Value.Id).ToList();",
      "\t\tOnTeamMembersUpdated?.Invoke(members);",
      "\t}",
      "\t",
      "\tpublic void CreateTeam(string teamName)",
      "\t{",
      "\t\tconnection.Reducers.CreateTeam(teamName);",
      "\t}",
      "\t",
      "\tpublic void JoinTeam(uint teamId)",
      "\t{",
      "\t\tconnection.Reducers.JoinTeam(teamId);",
      "\t}",
      "\t",
      "\tpublic void LeaveTeam()",
      "\t{",
      "\t\tconnection.Reducers.LeaveTeam();",
      "\t\tcurrentTeam = null;",
      "\t\tOnTeamLeft?.Invoke();",
      "\t}",
      "\t",
      "\tpublic void InvitePlayer(Identity playerId)",
      "\t{",
      "\t\tif (currentTeam != null)",
      "\t\t{",
      "\t\t\tconnection.Reducers.InviteToTeam(currentTeam.Value.Id, playerId);",
      "\t\t}",
      "\t}",
      "\t",
      "\tpublic void KickPlayer(Identity playerId)",
      "\t{",
      "\t\tif (currentTeam != null)",
      "\t\t{",
      "\t\t\tconnection.Reducers.KickFromTeam(currentTeam.Value.Id, playerId);",
      "\t\t}",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  },
  "SpacetimeDB Error Handling": {
    "prefix": ["stdb-error-handler"],
    "description": "Comprehensive error handling for SpacetimeDB",
    "body": [
      "using System;",
      "using UnityEngine;",
      "using SpacetimeDB;",
      "",
      "public class ${1:ErrorHandler} : MonoBehaviour",
      "{",
      "\tprivate DbConnection connection;",
      "\t",
      "\tpublic event Action<string> OnErrorOccurred;",
      "\tpublic event Action<string> OnWarningOccurred;",
      "\t",
      "\tvoid Start()",
      "\t{",
      "\t\tconnection = FindObjectOfType<${2:GameManager}>().GetConnection();",
      "\t\tSetupErrorHandling();",
      "\t}",
      "\t",
      "\tvoid SetupErrorHandling()",
      "\t{",
      "\t\t// Handle reducer failures",
      "\t\tconnection.Reducers.OnAnyReducer += (ctx) =>",
      "\t\t{",
      "\t\t\tswitch (ctx.Event.Status)",
      "\t\t\t{",
      "\t\t\t\tcase Status.Failed(var error):",
      "\t\t\t\t\tHandleReducerError(ctx.Event.Reducer, error);",
      "\t\t\t\t\tbreak;",
      "\t\t\t\tcase Status.OutOfEnergy:",
      "\t\t\t\t\tHandleOutOfEnergy(ctx.Event.Reducer);",
      "\t\t\t\t\tbreak;",
      "\t\t\t\tcase Status.Committed:",
      "\t\t\t\t\t// Success - no action needed",
      "\t\t\t\t\tbreak;",
      "\t\t\t}",
      "\t\t};",
      "\t\t",
      "\t\t// Handle subscription errors",
      "\t\tconnection.SubscriptionBuilder()",
      "\t\t\t.OnError((ctx, error) =>",
      "\t\t\t{",
      "\t\t\t\tHandleSubscriptionError(error);",
      "\t\t\t});",
      "\t}",
      "\t",
      "\tvoid HandleReducerError(Reducer reducer, string error)",
      "\t{",
      "\t\tstring message = $\"Reducer {reducer} failed: {error}\";",
      "\t\tDebug.LogError(message);",
      "\t\t",
      "\t\t// Show user-friendly error messages",
      "\t\tstring userMessage = GetUserFriendlyError(error);",
      "\t\tOnErrorOccurred?.Invoke(userMessage);",
      "\t}",
      "\t",
      "\tvoid HandleOutOfEnergy(Reducer reducer)",
      "\t{",
      "\t\tstring message = $\"Operation {reducer} failed: Insufficient energy\";",
      "\t\tDebug.LogWarning(message);",
      "\t\tOnWarningOccurred?.Invoke(\"Server is temporarily busy. Please try again.\");",
      "\t}",
      "\t",
      "\tvoid HandleSubscriptionError(Exception error)",
      "\t{",
      "\t\tstring message = $\"Subscription error: {error.Message}\";",
      "\t\tDebug.LogError(message);",
      "\t\tOnErrorOccurred?.Invoke(\"Failed to sync with server. Attempting to reconnect...\");",
      "\t}",
      "\t",
      "\tstring GetUserFriendlyError(string error)",
      "\t{",
      "\t\t// Convert technical errors to user-friendly messages",
      "\t\tif (error.Contains(\"duplicate key\") || error.Contains(\"unique constraint\"))",
      "\t\t{",
      "\t\t\treturn \"That name is already taken. Please choose a different one.\";",
      "\t\t}",
      "\t\telse if (error.Contains(\"not found\"))",
      "\t\t{",
      "\t\t\treturn \"The requested item could not be found.\";",
      "\t\t}",
      "\t\telse if (error.Contains(\"permission\") || error.Contains(\"unauthorized\"))",
      "\t\t{",
      "\t\t\treturn \"You don't have permission to perform this action.\";",
      "\t\t}",
      "\t\telse if (error.Contains(\"timeout\"))",
      "\t\t{",
      "\t\t\treturn \"Operation timed out. Please check your connection.\";",
      "\t\t}",
      "\t\telse",
      "\t\t{",
      "\t\t\treturn \"An unexpected error occurred. Please try again.\";",
      "\t\t}",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ]
  }
}